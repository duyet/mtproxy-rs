name: Cross Platform Build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
            archive_name: mtproxy-rs-linux-x86_64
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
            archive_name: mtproxy-rs-linux-arm64
            
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
            archive_name: mtproxy-rs-macos-x86_64
            
          # macOS ARM64
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: true
            archive_name: mtproxy-rs-macos-arm64

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      
      - name: Install cross
        if: matrix.cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      
      - name: Build binary
        run: |
          if [ "${{ matrix.cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Create archive
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/mtproxy-rs.exe release/
            cd release
            7z a ../${{ matrix.archive_name }}.zip mtproxy-rs.exe
          else
            cp target/${{ matrix.target }}/release/mtproxy-rs release/
            cd release
            tar -czvf ../${{ matrix.archive_name }}.tar.gz mtproxy-rs
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}.*
          
  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mtproxy-rs-linux-x86_64/mtproxy-rs-linux-x86_64.tar.gz
            mtproxy-rs-linux-arm64/mtproxy-rs-linux-arm64.tar.gz
            mtproxy-rs-macos-x86_64/mtproxy-rs-macos-x86_64.tar.gz
            mtproxy-rs-macos-arm64/mtproxy-rs-macos-arm64.tar.gz
          generate_release_notes: true 